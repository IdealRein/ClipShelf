[
  "import tkinter as tk\r\r\nimport json\r\r\nimport os\r\r\n\r\r\nclass ClipUI",
  "  ui = ClipUI(STORAGE_PATH)\r\n    monitor = ClipboardMonitor(ui.add_clip)\r\n\r\n    monitor_thread = threading.Thread(target=monitor.run, daemon=True)\r\n    monitor_thread.start()",
  " ui.run()",
  "import tkinter as tk\r\nimport json\r\nimport os\r\n\r\nclass ClipUI:\r\n    def __init__(self, storage_path):\r\n        self.storage_path = storage_path\r\n        self.clip_list = self.load_history()\r\n\r\n        self.root = tk.Tk()\r\n        self.root.title(\"ClipShelf - 剪贴板历史\")\r\n        self.root.geometry(\"500x400\")\r\n\r\n        self.listbox = tk.Listbox(self.root, width=60, height=20)\r\n        self.listbox.pack(pady=10)\r\n        self.listbox.bind('<Double-1>', self.on_select)\r\n\r\n        self.refresh_list()\r\n        self.root.protocol(\"WM_DELETE_WINDOW\", self.on_close)\r\n\r\n    def add_clip(self, text):\r\n        if text not in self.clip_list:\r\n            self.clip_list.insert(0, text)\r\n            self.refresh_list()\r\n            self.save_history()\r\n\r\n    def refresh_list(self):\r\n        self.listbox.delete(0, tk.END)\r\n        for item in self.clip_list:\r\n            self.listbox.insert(tk.END, item[:60])\r\n\r\n    def on_select(self, event):\r\n        index = self.listbox.curselection()\r\n        if index:\r\n            selected = self.clip_list[index[0]]\r\n            self.root.clipboard_clear()\r\n            self.root.clipboard_append(selected)\r\n\r\n    def load_history(self):\r\n        if os.path.exists(self.storage_path):\r\n            try:\r\n                with open(self.storage_path, 'r', encoding='utf-8') as f:\r\n                    return json.load(f)\r\n            except:\r\n                return []\r\n        return []\r\n\r\n    def save_history(self):\r\n        try:\r\n            with open(self.storage_path, 'w', encoding='utf-8') as f:\r\n                json.dump(self.clip_list, f, ensure_ascii=False, indent=2)\r\n        except:\r\n            pass\r\n\r\n    def on_close(self):\r\n        self.save_history()\r\n        self.root.destroy()\r\n\r\n    def run(self):\r\n        self.root.mainloop()",
  "import tkinter as tk\nimport json\nimport os\n\nclass ClipUI:\n    def __init__(self, storage_path):\n        self.storage_path = storage_path\n        self.clip_list = self.load_history()\n\n        self.root = tk.Tk()\n        self.root.title(\"ClipShelf - 剪贴板历史\")\n        self.root.geometry(\"500x400\")\n\n        self.listbox = tk.Listbox(self.root, width=60, height=20)\n        self.listbox.pack(pady=10)\n        self.listbox.bind('<Double-1>', self.on_select)\n\n        self.refresh_list()\n        self.root.protocol(\"WM_DELETE_WINDOW\", self.on_close)\n\n    def add_clip(self, text):\n        if text not in self.clip_list:\n            self.clip_list.insert(0, text)\n            self.refresh_list()\n            self.save_history()\n\n    def refresh_list(self):\n        self.listbox.delete(0, tk.END)\n        for item in self.clip_list:\n            self.listbox.insert(tk.END, item[:60])\n\n    def on_select(self, event):\n        index = self.listbox.curselection()\n        if index:\n            selected = self.clip_list[index[0]]\n            self.root.clipboard_clear()\n            self.root.clipboard_append(selected)\n\n    def load_history(self):\n        if os.path.exists(self.storage_path):\n            try:\n                with open(self.storage_path, 'r', encoding='utf-8') as f:\n                    return json.load(f)\n            except:\n                return []\n        return []\n\n    def save_history(self):\n        try:\n            with open(self.storage_path, 'w', encoding='utf-8') as f:\n                json.dump(self.clip_list, f, ensure_ascii=False, indent=2)\n        except:\n            pass\n\n    def on_close(self):\n        self.save_history()\n        self.root.destroy()\n\n    def run(self):\n        self.root.mainloop()"
]